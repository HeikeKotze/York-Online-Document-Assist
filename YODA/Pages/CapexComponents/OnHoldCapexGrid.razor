@using YODA.Repos
@using YODA.Repos.Models;
@using YODA.Services

@inject ICapexFormService capexService
@inject NavigationManager navManager
@inject IInstructionService instructionService
@inject ISignatoryService signatoryService
@inject IEmployeeService empService
@inject SharedDataService shareddataService

<Div Class="row">
    <Div Class="alert alert-success">
        <WhiteContainer>
            @if (capexforms is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Capex ID</th>
                            <th>Capex Title</th>
                            <th>Initiator</th>
                            <th>Modify</th>
                            <th>Instructions</th>
                            <th>View</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var capex in capexforms)
                        {
                            <tr>
                                <td>@capex.CapexId</td>
                                <td>@capex.CapexTitle</td>
                                <td>@capex.Initiator</td>
                                <td><button id="btnModify" @onclick="()=>GetCellValueForModify(capexforms.IndexOf(capex))" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Modify</button></td>
                                <td><button id="btnInstructions" @onclick="()=>GetCellValueForInstructions(capexforms.IndexOf(capex))" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Instructions</button></td>
                                <td><button id="btnView" @onclick="()=>GetCellValueForView(capexforms.IndexOf(capex))" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">View</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </WhiteContainer>
    </Div>    
</Div>

<Blazorise.Modal @ref="modalRef" Closing="@OnModalClosing">
    <Blazorise.ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Instructions for this Capex Form</ModalTitle>
        </ModalHeader>
        <ModalBody>
            @if (signatories != null && signatories.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Signatory</th>
                            <th>Instruction / Reason</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var c in signatories)
                        {
                            <tr>
                                <td>@(new MarkupString(c.UserName))</td>
                                <td>@(new MarkupString(c.FkScReason))</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p><em>There are no instructions or reasons for this form...</em></p>
            }
        </ModalBody>
        <ModalFooter>
            <button @onclick="CloseModal" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Back</button>
        </ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

<Blazorise.Modal @ref="modalModify" Closing="@OnModalClosing">
    <Blazorise.ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Modify Capex Form</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <div style="text-align:center; max-width:100%; align-content:center; margin: 0 auto;">
                <div class="alert alert-info">
                    Are you sure you want to modify this Capex Form?
                </div>
            </div>
            <div style="text-align:center; max-width:100%; align-content:center; margin: 0 auto; margin-top:10px">
                <div class="container" style="max-width:40%">
                    <div class="row">
                        <button @onclick="changeToModify" class="btn btn-dark">Retract and Modify</button>
                    </div>
                </div>
            </div>
        </ModalBody>
        <ModalFooter>
            <button @onclick="CloseModifyModal" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Back</button>
        </ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>


@code {
    //Variables----------------------------------------------------------------
    private List<CapexForm> capexforms = new();
    private List<FkSignatoriesCapex> signatories = new();

    private Blazorise.Modal modalBack = new();
    private Blazorise.Modal modalModify = new();

    private int idint = 0;

    private int selectedRowIndex = -1;
    private int selectedColumnIndex = 0;

    public string? name = string.Empty;
    private Employee sigEmp = new();

    //Initialize page----------------------------------------------------------
    protected override void OnInitialized()
    {

        if (shareddataService.accessLinkings.FirstOrDefault(x => x.ModuleID == 1).AccessTypeID == 1)
        {
            capexforms = capexService.GetCapexForOnHold();
        }
        //Figure out business unit department
        if (shareddataService.accessLinkings.FirstOrDefault(x => x.ModuleID == 1).AccessTypeID == 2)
        {
            capexforms = capexService.GetCapexForOnHoldBusinessUnit(shareddataService.accessLinkings.FirstOrDefault(x => x.ModuleID == 1).BusinessUnitID, shareddataService.accessLinkings.FirstOrDefault(x => x.ModuleID == 1).DepartmentID);
        }
        if (shareddataService.accessLinkings.FirstOrDefault(x => x.ModuleID == 1).AccessTypeID == 3)
        {
            capexforms = capexService.GetCapexForOnHoldInitiator(shareddataService.UserName);
        }

    }

    
    //Get specific capexid for view button-------------------------------------
    private void GetCellValueForView(int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < capexforms.Count)
        {
            selectedRowIndex = rowIndex;
            var selectedItem = capexforms[selectedRowIndex];
            string cellValue = selectedColumnIndex switch
            {
                0 => selectedItem.CapexId.ToString(),
                1 => selectedItem.CapexTitle.ToString(),
                2 => selectedItem.Initiator.ToString(),
                _ => "Invalid Column Index",
            };
            shareddataService.capexid = cellValue;
            navToView();
        }

    }

    //Get specific capexid for instructions button-------------------------------------
    private void GetCellValueForInstructions(int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < capexforms.Count)
        {
            selectedRowIndex = rowIndex;
            var selectedItem = capexforms[selectedRowIndex];
            string cellValue = selectedColumnIndex switch
            {
                0 => selectedItem.CapexId.ToString(),
                1 => selectedItem.CapexTitle.ToString(),
                2 => selectedItem.Initiator.ToString(),
                _ => "Invalid Column Index",
            };
            shareddataService.capexid = cellValue;
            if (int.TryParse(shareddataService.capexid, out int num))
            {
                idint = num;
            }
            setInstructions();
            ShowModal();
        }

    }

    //Get specific capexid for modify button-------------------------------------
    private void GetCellValueForModify(int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < capexforms.Count)
        {
            selectedRowIndex = rowIndex;
            var selectedItem = capexforms[selectedRowIndex];
            string cellValue = selectedColumnIndex switch
            {
                0 => selectedItem.CapexId.ToString(),
                1 => selectedItem.CapexTitle.ToString(),
                2 => selectedItem.Initiator.ToString(),
                _ => "Invalid Column Index",
            };
            shareddataService.capexid = cellValue;
            if (int.TryParse(shareddataService.capexid, out int num))
            {
                idint = num;
            }
            ShowModifyModal();
        }
    }

    //Change capex form to capex auth confirm -1 to edit again-------------------------
    public void changeToModify()
    {
        capexService.ChangeToModify(idint);
        CloseModifyModal();
        navManager.NavigateTo(navManager.Uri, forceLoad: true);

    }

    
    //Set instructions for capex when clicked------------------------------------------
    public void setInstructions()
    {
        signatories = instructionService.GetInstructions(idint);
        foreach (var item in signatories)
        {
            name = signatoryService.GetUserName(item.FkScSignatoryId);
            sigEmp = empService.GetSingleEmployee(name);
            item.UserName = sigEmp.FullName;
        }
    }

    //Navigation-----------------------------------------------------------------------
    public void navToView()
    {
        navManager.NavigateTo($"/ViewCapexForm");
    }

    
    //Modals--------------------------------------------------------------------------
    private Blazorise.Modal modalRef = new();

    private bool cancelClose;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task CloseModal()
    {
        cancelClose = false;

        return modalRef.Hide();
    }

    private Task ShowModifyModal()
    {
        return modalModify.Show();
    }

    private Task CloseModifyModal()
    {
        cancelClose = false;

        return modalModify.Hide();
    }


    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        e.Cancel = cancelClose
            || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }
}
