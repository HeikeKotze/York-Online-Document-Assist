
@using YODA.Repos
@using YODA.Repos.Models;
@using YODA.Services

@inject ICapexFormService capexService
@inject ISignatoryService sigService
@inject IEmployeeService empService
@inject ICommentService commentService
@inject SharedDataService shareddataService
@inject IEmployeeService empservice
@inject NavigationManager navManager

<Div Class="row">
    <Div Class="alert alert-success">
    <WhiteContainer>
        @if (capexforms is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th style="width:5%">Capex ID</th>
                        <th style="width:10%">Capex Title</th>
                        <th style="width:10%">Initiator</th>
                        <th style="width:10%">Board Approval Requested</th>
                        <th style="width:5%">Comments</th>
                        <th style="width:5%"></th>
                        <th style="width:10%">Modify</th>
                        <th style="width:10%">Sign</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var capex in capexforms)
                    {
                        <tr>
                            <td>@capex.CapexId</td>
                            <td>@capex.CapexTitle</td>
                            <td>@capex.Initiator</td>
                            <td>
                                @if (CheckForBoard(capex.CapexId))
                                {
                                    <span class="oi oi-circle-check" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <span class="oi oi-circle-x" aria-hidden="true"></span>
                                }
                            </td>
                            <td><button id="btnComments" @onclick="()=>GetCellValueForComments(capexforms.IndexOf(capex))" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Comments</button></td>
                            <td>
                                @if (CheckForComments(capex.CapexId))
                                {
                                    <span class="oi oi-check text-warning" aria-hidden="true"></span>
                                }
                            </td>
                            <td>
                                @if(capex.Initiator == capex.EmployeeNumber)
                                {
                                    <button id="btnModify" @onclick="()=>GetCellValueForModify(capexforms.IndexOf(capex))" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Modify</button>
                                }                              
                            </td>
                            <td><button id="btnSign" @onclick="()=>GetCellValueForSign(capexforms.IndexOf(capex))" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Sign</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </WhiteContainer>
    </Div>
</Div>

<Blazorise.Modal @ref="modalRef" Closing="@OnModalClosing">
    <Blazorise.ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Comments for this Capex Form</ModalTitle>
        </ModalHeader>
        <ModalBody>
            @if (comments != null && comments.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Form Section</th>
                            <th>Consentee</th>
                            <th>Comment</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var c in comments)
                        {
                            <tr>
                                <td>@c.FormSection</td>
                                <td>@c.Consentee</td>
                                <td>@c.Comments</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p><em>There are no comments for this form...</em></p>
            }
        </ModalBody>
        <ModalFooter>
            <button @onclick="CloseModal" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Back</button>
        </ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

<Blazorise.Modal @ref="modalModify" Closing="@OnModalClosing">
    <Blazorise.ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Modify Capex Form</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <div style="text-align:center; max-width:100%; align-content:center; margin: 0 auto;">
                <div class="alert alert-info">
                    Are you sure you want to modify this Capex Form?
                </div>
            </div>
            <div style="text-align:center; max-width:100%; align-content:center; margin: 0 auto; margin-top:10px">
                <div class="container" style="max-width:40%">
                    <div class="row">
                        <button @onclick="changeToModify" class="btn btn-dark">Retract and Modify</button>
                    </div>
                </div>
            </div>
        </ModalBody>
        <ModalFooter>
            <button @onclick="CloseModifyModal" class="btn btn-dark" style="height:30px; width:fit-content; font-size:12px; padding:5px">Back</button>
        </ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

@code {
    //Variables----------------------------------------------------------------
    private List<CapexForm> capexforms = new();
    private List<CapexForm> capexinit = new();
    private List<CapexForm> capexsign = new();

    private Employee user = new();

    private List<FkSignatoriesCapex> signatories = new();
    private List<FkSignatoriesCapex> sigs = new();
    private List<YODA.Repos.Models.Comment> comments = new();
    private int idint;

    private Blazorise.Modal modalModify = new();

    private bool hasBoard = false;
    private bool hasComment = false;

    private int selectedRowIndex = -1;
    private int selectedColumnIndex = 0;


    //Initialize page-----------------------------------------------------------
    protected override void OnInitialized()
    {
        user = empservice.GetSingleEmployee(shareddataService.UserName);

        #region not used access types
        // if (shareddataService.accessLinkings.FirstOrDefault(x => x.ModuleID == 1).AccessTypeID == 1)
        // {
        //     capexforms = capexService.GetCapexForAwaitingApproval();
        // }
        // if (shareddataService.accessLinkings.FirstOrDefault(x => x.ModuleID == 1).AccessTypeID == 2)
        // {
        //     capexforms = capexService.GetCapexForAwaitingApprovalBusinessUnit(shareddataService.BusinessUnitID);
        // }
        // if (shareddataService.accessLinkings.FirstOrDefault(x => x.ModuleID == 1).AccessTypeID == 3)
        // {
        #endregion

        //Get Capex if not signed (notworking properly)
        capexsign = capexService.GetCapexToSign(shareddataService.UserID);
        capexinit = capexService.GetCapexForAwaitingApprovalInitiator(user.EmployeeID);

        if(capexsign.Count > 0)
        {
            capexforms = capexinit.Concat(capexsign).ToList();
            capexforms = capexService.RemoveDuplicates(capexforms);
        }
        else
        {
            capexforms = capexinit;
        }

        #region previous get items to sign
        // foreach(var item in capexsign)
        // {
        //     sigs = capexService.GetSignatoriesCapex(item.CapexId);

        //     foreach(var sig in sigs)
        //     {
        //         if(sig.FkScSignedConfirmation == null && sig.FkScSignatoryId == user.EmployeeID)
        //         {
        //             capexforms = capexinit.Concat(capexsign).ToList();
        //             capexforms = capexService.RemoveDuplicates(capexforms);
        //         }
        //         else
        //         {                        
        //             capexforms = capexinit;
        //             capexforms = capexService.RemoveDuplicates(capexforms);
        //         }
        //     }
        // }

        //}

        #endregion
        
        if(capexforms != null)
        {
            foreach (var c in capexforms)
            {
                c.EmployeeNumber = empService.GetEmployeeName(shareddataService.UserName);
            }
        }

    }

    //Check if capex has comments, icon shown-----------------------------------------
    private bool CheckForComments(int id)
    {
        comments = commentService.GetComments(id);
        hasComment = commentService.CommentsInList(comments);
        return hasComment;

    }


    //Check if capex has been sent for board approval---------------------------------
    private bool CheckForBoard(int id)
    {
        signatories = sigService.findSignatoriesByCapex(id);
        hasBoard = sigService.BoardInSignatories(signatories);
        return hasBoard;
    }


    //Get capexid for selected row comments button------------------------------------
    private void GetCellValueForComments(int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < capexforms.Count)
        {
            selectedRowIndex = rowIndex;
            var selectedItem = capexforms[selectedRowIndex];
            string cellValue = selectedColumnIndex switch
            {
                0 => selectedItem.CapexId.ToString(),
                1 => selectedItem.CapexTitle.ToString(),
                2 => selectedItem.Initiator.ToString(),
                _ => "Invalid Column Index",
            };
            shareddataService.capexid = cellValue;

            if (int.TryParse(shareddataService.capexid, out int num))
            {
                idint = num;
            }

            comments = commentService.GetComments(idint);
            ShowModal();
        }

    }

    //Get capexid for selected row sign button-------------------------------------
    private void GetCellValueForSign(int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < capexforms.Count)
        {
            selectedRowIndex = rowIndex;
            var selectedItem = capexforms[selectedRowIndex];
            string cellValue = selectedColumnIndex switch
            {
                0 => selectedItem.CapexId.ToString(),
                1 => selectedItem.CapexTitle.ToString(),
                2 => selectedItem.Initiator.ToString(),
                _ => "Invalid Column Index",
            };
            shareddataService.capexid = cellValue;
            navToSign();
        }

    }

    //Get capexid for selected row modify button-----------------------------------
    private void GetCellValueForModify(int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < capexforms.Count)
        {
            selectedRowIndex = rowIndex;
            var selectedItem = capexforms[selectedRowIndex];
            string cellValue = selectedColumnIndex switch
            {
                0 => selectedItem.CapexId.ToString(),
                1 => selectedItem.CapexTitle.ToString(),
                2 => selectedItem.Initiator.ToString(),
                _ => "Invalid Column Index",
            };
            shareddataService.capexid = cellValue;

            if (int.TryParse(shareddataService.capexid, out int num))
            {
                idint = num;
            }

            ShowModifyModal();
        }
    }

    //Change capexform authorization confirm to -1---------------------------------
    public void changeToModify()
    {
        capexService.ChangeToModify(idint);
        CloseModifyModal();
        navManager.NavigateTo(navManager.Uri, forceLoad: true);

    }

    //Navigation------------------------------------------------------------------
    public void navToSign()
    {
        navManager.NavigateTo($"/SignCapexForm");
    }

    //Modals----------------------------------------------------------------------
    private Blazorise.Modal modalRef = new();

    private bool cancelClose;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task CloseModal()
    {
        cancelClose = false;

        return modalRef.Hide();
    }

    private Task ShowModifyModal()
    {
        return modalModify.Show();
    }

    private Task CloseModifyModal()
    {
        cancelClose = false;

        return modalModify.Hide();
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        e.Cancel = cancelClose
            || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }

}
